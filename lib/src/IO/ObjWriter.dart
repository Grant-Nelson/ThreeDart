part of ThreeDart.IO;

/// Entity writer for writing *.obj files.
class _objWriter {
  bool _normals;
  bool _texture;
  bool _txtCube;
  List<String> _lines;
  int _totalVertices;
  int _decimals;

  /// Creates a new object writer.
  _objWriter(this._normals, this._texture, this._txtCube, this._decimals):
    this._lines = [],
    this._totalVertices = 1 {
    this._lines.add('# Generated by 3Dart');
  }

  /// Adds an entity to the object file.
  void addEntity(Core.Entity entity) {
    for(Core.Entity child in entity.children)
      this.addEntity(child);

    var shape = entity.shape;
    if (shape != null) {
      this._lines.add('o ${entity.name}');
      this.addShape(shape);
    }
  }

  /// Gets all the lines of the object file.
  List<String> get lines => this._lines;

  /// Stringifies the given double with the configured decimals.
  String _toStr(double value) =>
    value.toStringAsFixed(this._decimals);

  /// Adds a shape to the object file.
  void addShape(Shapes.Shape shape) {
    final int offset = this._totalVertices;

    final int vertexCount = shape.vertices.length;
    if (this._normals) shape.calculateNormals();
    if (this._texture && this._txtCube) shape.calculateCubeTextures();
    for (int i = 0; i < vertexCount; i++) {
      Shapes.Vertex vertex = shape.vertices[i];

      var loc = vertex.location;
      if (loc == null)
        throw new Exception('May not write vertex $i because it has a null location.');
      this._lines.add('v '+this._toStr(loc.x)+' '+this._toStr(loc.y)+' '+this._toStr(loc.z));

      if (this._texture) {
        if (this._txtCube) {
          var txt = vertex.textureCube;
          if (txt != null)
            this._lines.add('vt '+this._toStr(txt.dx)+' '+this._toStr(txt.dy)+' '+this._toStr(txt.dz));
        } else {
          var txt = vertex.texture2D;
          if (txt != null)
            this._lines.add('vt '+this._toStr(txt.x)+' '+this._toStr(txt.y));
        }
      }

      if (this._normals) {
        var norm = vertex.normal;
        if (norm != null)
          this._lines.add('vn '+this._toStr(norm.dx)+' '+this._toStr(norm.dy)+' '+this._toStr(norm.dz));
      }
    }
    this._totalVertices += vertexCount;

    final int faceCount = shape.faces.length;
    for (int i = 0; i < faceCount; i++) {
      Shapes.Face face = shape.faces[i];
      int v1 = (face.vertex1?.index ?? 0) + offset;
      int v2 = (face.vertex2?.index ?? 0) + offset;
      int v3 = (face.vertex3?.index ?? 0) + offset;
      if (this._texture) {
        if (this._normals)
          this._lines.add('f ${v1}/${v1}/${v1} ${v2}/${v2}/${v2} ${v3}/${v3}/${v3}');
        else this._lines.add('f ${v1}/${v1} ${v2}/${v2} ${v3}/${v3}');
      } else {
        if (this._normals)
          this._lines.add('f ${v1}//${v1} ${v2}//${v2} ${v3}//${v3}');
        else this._lines.add('f ${v1} ${v2} ${v3}');
      }
    }
  }
}
